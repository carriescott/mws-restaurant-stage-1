const dbPromise=idb.open('restaurant-details',1,a=>{a.createObjectStore('restaurants'),a.createObjectStore('favorite-restaurants'),a.createObjectStore('restaurant-reviews',{autoIncrement:!0})});class DBHelper{static getFromIDB(a,b){return dbPromise.then(c=>{return c.transaction(b).objectStore(b).get(a)})}static getAllFromIDB(a){return dbPromise.then(b=>{return b.transaction(a).objectStore(a).getAll()})}static addToIDB(a,b,c){return dbPromise.then(d=>{const e=d.transaction(c,'readwrite');return e.objectStore(c).put(b,a),console.log('finished adding data'),e.complete})}static addToReviewsIDB(a){return dbPromise.then(b=>{const c=b.transaction('restaurant-reviews','readwrite');return c.objectStore('restaurant-reviews').put(a),console.log('finished adding data'),c.complete})}static deleteFromIDB(a,b){return dbPromise.then(c=>{const d=c.transaction(b,'readwrite');return d.objectStore(b).delete(a),d.complete})}static get DATABASE_URL(){return`http://localhost:${1337}/restaurants`}static get DATABASE_URL_Review(){return`http://localhost:${1337}/reviews`}static get DATABASE_URL_Favorites(){return`http://localhost:${1337}/restaurants/?is_favorite=true`}static fetchRestaurants(a){fetch(DBHelper.DATABASE_URL).then(function(b){return console.log('response',b),b.json()}).then(function(b){const c=b;console.log('restaurants',c),a(null,c),DBHelper.addToIDB('restaurant',c,'restaurants')}).catch(function(b){var c=DBHelper.getFromIDB('restaurant','restaurants');console.log('Looks like there was a problem: \n',b),c.then(function(d){const e=d;a(null,e),console.log(e)},function(d){console.log(d)})})}static fetchReview(a,b){console.log('yippee id',a),fetch(`http://localhost:1337/reviews/?restaurant_id=${a}`).then(function(c){return console.log('response',c),c.json()}).then(function(c){const d=c;console.log('review',d);var e;for(e=0;e<d.length;e++)console.log('review id',d[e].id),DBHelper.addToReviewsIDB(d[e]);b(null,d)}).catch(function(){var d=DBHelper.getAllFromIDB('restaurant-reviews');d.then(function(e){const f=e;console.log('myReviews',f);var g;const h=[];for(g=0;g<f.length;g++)console.log('review id',f[g].id),console.log('review restaurant id',f[g].restaurant_id),f[g].restaurant_id==a&&(console.log('myReviewYippee',f[g]),h.push(f[g])),console.log('test',h);b(null,h)},function(e){console.log(e)})})}static fetchFavorites(a){fetch(DBHelper.DATABASE_URL_Favorites).then(function(b){return console.log('response',b),b.json()}).then(function(b){const c=b;console.log('favorites',c);var d;for(d=0;d<c.length;d++)console.log('favorites, id',c[d].id),DBHelper.addToIDB(c[d].id,c[d],'favorite-restaurants');a(null,c)}).catch(function(b){var c=DBHelper.getAllFromIDB('favorite-restaurants');console.log('Looks like there was a problem: \n',b),c.then(function(d){const e=d;console.log('favoriteRestaurants',e),a(null,e)},function(d){console.log(d)})})}static fetchReviewById(a,b){console.log('fetchReviewByID',a),DBHelper.fetchReview((c,d)=>{if(c)b(c,null);else{const e=d.find(f=>f.restaurant_id==a);e?b(null,e):b('Restaurant does not exist',null)}})}static fetchFavoritesById(a,b){console.log('fetchReviewByID',a),DBHelper.fetchFavorites((c,d)=>{if(c)b(c,null);else{const e=d.find(f=>f.restaurant_id==a);e?b(null,e):b('Restaurant does not exist',null)}})}static fetchRestaurantById(a,b){DBHelper.fetchRestaurants((c,d)=>{if(c)b(c,null);else{const e=d.find(f=>f.id==a);e?b(null,e):b('Restaurant does not exist',null)}})}static fetchRestaurantByCuisine(a,b){DBHelper.fetchRestaurants((c,d)=>{if(c)b(c,null);else{const e=d.filter(f=>f.cuisine_type==a);b(null,e)}})}static fetchRestaurantByNeighborhood(a,b){DBHelper.fetchRestaurants((c,d)=>{if(c)b(c,null);else{const e=d.filter(f=>f.neighborhood==a);b(null,e)}})}static fetchRestaurantByCuisineAndNeighborhood(a,b,c){DBHelper.fetchRestaurants((d,e)=>{if(d)c(d,null);else{let f=e;'all'!=a&&(f=f.filter(g=>g.cuisine_type==a)),'all'!=b&&(f=f.filter(g=>g.neighborhood==b)),c(null,f)}})}static fetchNeighborhoods(a){DBHelper.fetchRestaurants((b,c)=>{if(b)a(b,null);else{const d=c.map((f,g)=>c[g].neighborhood),e=d.filter((f,g)=>d.indexOf(f)==g);a(null,e)}})}static fetchCuisines(a){DBHelper.fetchRestaurants((b,c)=>{if(b)a(b,null);else{const d=c.map((f,g)=>c[g].cuisine_type),e=d.filter((f,g)=>d.indexOf(f)==g);a(null,e)}})}static urlForRestaurant(a){return`./restaurant.html?id=${a.id}`}static imageUrlForRestaurant(a){return void 0===a.photograph?`/img/default.jpg`:`/img/${a.photograph}.jpg`}static imageSrcsetForRestaurant(a){return void 0===a.photograph?`/img/responsive/800w/default.jpg 800w, /img/responsive/480w/default.jpg 480w, /img/responsive/360w/default.jpg 360w`:`/img/responsive/800w/${a.photograph}.jpg 800w, /img/responsive/480w/${a.photograph}.jpg 480w, /img/responsive/360w/${a.photograph}.jpg 360w`}static mapMarkerForRestaurant(a,b){const c=new google.maps.Marker({position:a.latlng,title:a.name,url:DBHelper.urlForRestaurant(a),map:b,animation:google.maps.Animation.DROP});return c}static saveOffline(a){console.log('save offline',a),console.log(a.name.value),console.log(a.comments.value),console.log(a.id.value);const b={restaurant_id:a.id.value,name:a.name.value,comments:a.comments.value,rating:a.restaurantRating.value};var c=DBHelper.addToReviewsIDB(b);c.then(function(d){console.log('restaurantReview',d)},function(d){console.log(d)}),DBHelper.postReviewToDatabase(b)}static postReviewToDatabase(a){return fetch(`http://localhost:1337/reviews/`,{method:'POST',headers:{'Content-Type':'application/json; charset=utf-8'},body:JSON.stringify(a)}).then(function(b){return console.log('response',b),b.json()}).then(function(b){const c=b;return console.log('data',c),c}).catch(function(b){console.log('Looks like there was a problem: \n',b),setTimeout(DBHelper.postReviewToDatabase,3e4,a),console.log('setTimeout is working')})}static setFavoriteStatus(a,b){return fetch(`http://localhost:1337/restaurants/${a}/?is_favorite=${b}`,{method:'PUT'}).then(function(c){return console.log('response',c),c.json()}).then(function(c){console.log('setFavoriteStatusData',c)}).catch(function(c){console.log('Looks like there was a problem: \n',c),setTimeout(DBHelper.setFavoriteStatus,3e4,a,b),console.log('setTimeout is working')})}}